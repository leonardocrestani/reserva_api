generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Genre {
  Male
  Female
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  first_name   String
  last_name    String
  cpf          String
  genre        Genre
  country      String
  email        String      @unique
  password     String      @unique
  phone_number String
  schedules    Schedules[]
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now()) @updatedAt
}

enum Day {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

type Address {
  city_code    Int
  city_name    String
  state        String
  country      String
  street       String
  neighborhood String
}

type Contact {
  name         String
  phone_number String
}

type Operation_time {
  open_hour     Int
  close_hour    Int
  days_open     Day[]
}

model Place {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  place_name       String         @unique
  cnpj             String         @unique
  number_of_courts Int
  address          Address
  contact          Contact
  operation_time   Operation_time
  courts           Court[]
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now()) @updatedAt
}

model Court {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  place            Place       @relation(onUpdate: Cascade, onDelete: Cascade, fields: [place_id], references: [id])
  place_id         String      @db.ObjectId
  place_court_name String
  court_name       String @unique
  schedules        Schedules[]
  created_at       DateTime    @default(now())
  updated_at       DateTime    @default(now()) @updatedAt
  @@unique ([place_court_name, court_name])
}

model Schedules {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  court                        Court    @relation(onDelete: Cascade, fields: [court_id], references: [id])
  court_id                     String   @db.ObjectId
  court_name                   String
  place_court_name             String
  hour                         Int @unique
  is_rent                      Boolean  @default(false)
  day String
  responsible_person           User?    @relation(onDelete: SetNull, fields: [responsible_person_id], references: [id])
  responsible_person_id        String?  @unique @db.ObjectId
  responsible_person_email     String?
  responsible_person_full_name String?
  created_at                   DateTime @default(now())
  updated_at                   DateTime @default(now()) @updatedAt
  @@unique ([place_court_name, court_name, hour])
}
